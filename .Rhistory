curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
returnImplDensity = function(ST) {
res<-log(ST/optionsToFit$Forward[1])*implDensityScaled(ST)
return(res)
}
returnImplDensitySquared = function(ST) {
res<-log(ST/optionsToFit$Forward[1])^2*implDensityScaled(ST)
return(res)
}
#returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(implDensity, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Density")
#curve(implDensityScaled, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Log Returns")
#calculate the mean of the function by integration, and the var by using the usual formula
mean = tryCatch(integrate(function(x) {return(returnImplDensity(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(mean, "error")) next
varHelp = tryCatch(integrate(function(x) {return(returnImplDensitySquared(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(varHelp, "error")) next
mean = mean$value
var = varHelp$value/(term/12) - mean^2
}
return(c(mean, var))
}
meanvec<-vector()
varvec<-vector()
termvec<-vector()
#Indicates whether the calculated implied density curve is valid, if not, the SVI interpolation is redone
valid<-FALSE
#Looping over different times to maturities. Idea: calculate the SVI curve (Q4) + RN densities (Q6) for different maturities
#Choose t fix (here: 2006-01-31)
#for(term in c(1, 3, 6, 12, 24, 36, 48, 60, 84, 120)) {
for(term in c(1)) {
res <- calcImplDensity("2006-01-31", term)
meanvec<-c(meanvec, res[1])
varvec<-c(varvec, res[2])
termvec<-c(termvec, term)
}
calcImplDensity <- function(date, term) {
var<--1
while(var < 0) {
#date<-"2006-01-31"
#term<-12
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == date, ]
optionsToFit<-optionsToFit[optionsToFit$Term == term, ]
lIntegrBound <- 100
uIntegrBound <- 10000
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum = sum + vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 0.5e-3, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
bestFitLog = function(k) {bestFit(log(k))}
#Use this to plot the SVI curve
curve(bestFit, from=-2, to=2, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
curve(bestFit, from=-exp(2), to=exp(2), xlab="Moneyness [K/F]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
integral = tryCatch(integrate(implDensity, lower = lIntegrBound, upper = 10000), error = function(e) e)
if(inherits(integral, "error")) next
implDensityScaled = function(K) {return(implDensity(K) / integral$value)}
#Use this to plot implied densities
curve(implDensityScaled, from=200, to=2500, xlab="ST", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
#Function only used for plotting
#Input: Return - ouput: RND
returnRND = function(R) {
ST = exp(R)*optionsToFit$Forward[1]
return(implDensityScaled(ST))
}
integralReturn = tryCatch(returnRND, lower = log(lIntegrBound/optionsToFit$Forward[1]), upper = log(10000/optionsToFit$Forward[1]), error = function(e) e)
if(inherits(integralReturn, "error")) next
returnRNDScaled = function(R) {return(returnRND(R) / integralReturn$value)}
#Use this to plot implied densities
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
returnImplDensity = function(ST) {
res<-log(ST/optionsToFit$Forward[1])*implDensityScaled(ST)
return(res)
}
returnImplDensitySquared = function(ST) {
res<-log(ST/optionsToFit$Forward[1])^2*implDensityScaled(ST)
return(res)
}
#returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(implDensity, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Density")
#curve(implDensityScaled, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Log Returns")
#calculate the mean of the function by integration, and the var by using the usual formula
mean = tryCatch(integrate(function(x) {return(returnImplDensity(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(mean, "error")) next
varHelp = tryCatch(integrate(function(x) {return(returnImplDensitySquared(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(varHelp, "error")) next
mean = mean$value
var = varHelp$value/(term/12) - mean^2
}
return(c(mean, var))
}
meanvec<-vector()
varvec<-vector()
termvec<-vector()
#Indicates whether the calculated implied density curve is valid, if not, the SVI interpolation is redone
valid<-FALSE
#Looping over different times to maturities. Idea: calculate the SVI curve (Q4) + RN densities (Q6) for different maturities
#Choose t fix (here: 2006-01-31)
#for(term in c(1, 3, 6, 12, 24, 36, 48, 60, 84, 120)) {
for(term in c(1)) {
res <- calcImplDensity("2006-01-31", term)
meanvec<-c(meanvec, res[1])
varvec<-c(varvec, res[2])
termvec<-c(termvec, term)
}
date<-"2006-01-31"
term<-12
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == date, ]
optionsToFit<-optionsToFit[optionsToFit$Term == term, ]
lIntegrBound <- 100
uIntegrBound <- 10000
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum = sum + vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 0.5e-3, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
bestFitLog = function(k) {bestFit(log(k))}
bestFit(1)
bestFitLog(exp(1))
bestFit(2)
bestFitLog(exp(2))
#Use this to plot the SVI curve
curve(bestFit, from=-2, to=2, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
curve(bestFit, from=-exp(2), to=exp(2), xlab="Moneyness [K/F]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
#Use this to plot the SVI curve
curve(bestFit, from=-2, to=2, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
curve(bestFitLog, from=-exp(2), to=exp(2), xlab="Moneyness [K/F]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
#Use this to plot the SVI curve
curve(bestFit, from=-2, to=2, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
curve(bestFitLog, from=exp(-2), to=exp(2), xlab="Moneyness [K/F]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
integral = tryCatch(integrate(implDensity, lower = lIntegrBound, upper = 10000), error = function(e) e)
if(inherits(integral, "error")) next
implDensityScaled = function(K) {return(implDensity(K) / integral$value)}
#Use this to plot implied densities
curve(implDensityScaled, from=200, to=2500, xlab="ST", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
#Function only used for plotting
#Input: Return - ouput: RND
returnRND = function(R) {
ST = exp(R)*optionsToFit$Forward[1]
return(implDensityScaled(ST))
}
integralReturn = tryCatch(returnRND, lower = log(lIntegrBound/optionsToFit$Forward[1]), upper = log(10000/optionsToFit$Forward[1]), error = function(e) e)
if(inherits(integralReturn, "error")) next
returnRNDScaled = function(R) {return(returnRND(R) / integralReturn$value)}
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
#Function only used for plotting
#Input: Return - ouput: RND
returnRND = function(R) {
ST = exp(R)*optionsToFit$Forward[1]
return(implDensityScaled(ST))
}
integralReturn = tryCatch(integrate(returnRND, lower = log(lIntegrBound/optionsToFit$Forward[1]), upper = log(10000/optionsToFit$Forward[1])), error = function(e) e)
if(inherits(integralReturn, "error")) next
returnRNDScaled = function(R) {return(returnRND(R) / integralReturn$value)}
integrate(returnRNDScaled, lower = log(lIntegrBound/optionsToFit$Forward[1]), upper = log(10000/optionsToFit$Forward[1]))
#Use this to plot implied densities
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
calcImplDensity <- function(date, term) {
var<--1
while(var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == date, ]
optionsToFit<-optionsToFit[optionsToFit$Term == term, ]
lIntegrBound <- 100
uIntegrBound <- 10000
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum = sum + vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 0.5e-3, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
bestFitLog = function(k) {bestFit(log(k))}
#Use this to plot the SVI curve
curve(bestFit, from=-2, to=2, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
curve(bestFitLog, from=exp(-2), to=exp(2), xlab="Moneyness [K/F]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
integral = tryCatch(integrate(implDensity, lower = lIntegrBound, upper = 10000), error = function(e) e)
if(inherits(integral, "error")) next
implDensityScaled = function(K) {return(implDensity(K) / integral$value)}
#Use this to plot implied densities
curve(implDensityScaled, from=200, to=2500, xlab="ST", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
#Function only used for plotting
#Input: Return - ouput: RND
returnRND = function(R) {
ST = exp(R)*optionsToFit$Forward[1]
return(implDensityScaled(ST))
}
integralReturn = tryCatch(integrate(returnRND, lower = log(lIntegrBound/optionsToFit$Forward[1]), upper = log(10000/optionsToFit$Forward[1])), error = function(e) e)
if(inherits(integralReturn, "error")) next
returnRNDScaled = function(R) {return(returnRND(R) / integralReturn$value)}
#Use this to plot implied densities
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
returnImplDensity = function(ST) {
res<-log(ST/optionsToFit$Forward[1])*implDensityScaled(ST)
return(res)
}
returnImplDensitySquared = function(ST) {
res<-log(ST/optionsToFit$Forward[1])^2*implDensityScaled(ST)
return(res)
}
#returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(implDensity, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Density")
#curve(implDensityScaled, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Log Returns")
#calculate the mean of the function by integration, and the var by using the usual formula
mean = tryCatch(integrate(function(x) {return(returnImplDensity(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(mean, "error")) next
varHelp = tryCatch(integrate(function(x) {return(returnImplDensitySquared(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(varHelp, "error")) next
mean = mean$value
var = varHelp$value/(term/12) - mean^2
}
return(c(mean, var))
}
meanvec<-vector()
varvec<-vector()
termvec<-vector()
#Indicates whether the calculated implied density curve is valid, if not, the SVI interpolation is redone
valid<-FALSE
#Looping over different times to maturities. Idea: calculate the SVI curve (Q4) + RN densities (Q6) for different maturities
#Choose t fix (here: 2006-01-31)
for(term in c(1, 3, 6, 12, 24, 36, 48, 60, 84, 120)) {
#for(term in c(1)) {
res <- calcImplDensity("2006-01-31", term)
meanvec<-c(meanvec, res[1])
varvec<-c(varvec, res[2])
termvec<-c(termvec, term)
}
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
RNDPlot <- curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
dev.copy(RNDPlot,paste("RND", date, "_", term, ".png", sep = ""))
dev.off()
dev.copy(RNDPlot,filename = paste("RND", date, "_", term, ".png", sep = ""))
dev.off()
png(filename = paste("RND", date, "_", term, ".png", sep = ""))
RNDPlot
dev.off()
RNDPlot
png(filename = paste("RND", date, "_", term, ".png", sep = ""))
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density -", date, "Term:", term))
dev.off()
png(filename = paste("RND", date, "_", term, ".png", sep = ""))
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density -", date, "Term:", term))
dev.off()
calcImplDensity <- function(date, term) {
var<--1
while(var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == date, ]
optionsToFit<-optionsToFit[optionsToFit$Term == term, ]
lIntegrBound <- 100
uIntegrBound <- 10000
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum = sum + vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 0.5e-3, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
bestFitLog = function(k) {bestFit(log(k))}
#Use this to plot the SVI curve
png(filename = paste("SVILOG", date, "_", term, ".png", sep = ""))
curve(bestFit, from=-2, to=2, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
dev.off()
png(filename = paste("SVI", date, "_", term, ".png", sep = ""))
curve(bestFitLog, from=exp(-2), to=exp(2), xlab="Moneyness [K/F]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
dev.off()
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
integral = tryCatch(integrate(implDensity, lower = lIntegrBound, upper = 10000), error = function(e) e)
if(inherits(integral, "error")) next
implDensityScaled = function(K) {return(implDensity(K) / integral$value)}
#Use this to plot implied densities
png(filename = paste("RNDST", date, "_", term, ".png", sep = ""))
curve(implDensityScaled, from=200, to=2500, xlab="ST", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
dev.off()
#Function only used for plotting
#Input: Return - ouput: RND
returnRND = function(R) {
ST = exp(R)*optionsToFit$Forward[1]
return(implDensityScaled(ST))
}
integralReturn = tryCatch(integrate(returnRND, lower = log(lIntegrBound/optionsToFit$Forward[1]), upper = log(10000/optionsToFit$Forward[1])), error = function(e) e)
if(inherits(integralReturn, "error")) next
returnRNDScaled = function(R) {return(returnRND(R) / integralReturn$value)}
#Use this to plot implied densities
png(filename = paste("RND", date, "_", term, ".png", sep = ""))
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density -", date, "Term:", term))
dev.off()
returnImplDensity = function(ST) {
res<-log(ST/optionsToFit$Forward[1])*implDensityScaled(ST)
return(res)
}
returnImplDensitySquared = function(ST) {
res<-log(ST/optionsToFit$Forward[1])^2*implDensityScaled(ST)
return(res)
}
#returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(implDensity, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Density")
#curve(implDensityScaled, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Log Returns")
#calculate the mean of the function by integration, and the var by using the usual formula
mean = tryCatch(integrate(function(x) {return(returnImplDensity(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(mean, "error")) next
varHelp = tryCatch(integrate(function(x) {return(returnImplDensitySquared(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(varHelp, "error")) next
mean = mean$value
var = varHelp$value/(term/12) - mean^2
}
return(c(mean, var))
}
meanvec<-vector()
varvec<-vector()
termvec<-vector()
#Indicates whether the calculated implied density curve is valid, if not, the SVI interpolation is redone
valid<-FALSE
#Looping over different times to maturities. Idea: calculate the SVI curve (Q4) + RN densities (Q6) for different maturities
#Choose t fix (here: 2006-01-31)
for(term in c(1, 3, 6, 12, 24, 36, 48, 60, 84, 120)) {
#for(term in c(1)) {
res <- calcImplDensity("2006-01-31", term)
meanvec<-c(meanvec, res[1])
varvec<-c(varvec, res[2])
termvec<-c(termvec, term)
}
t
meanvec06<-meanvec
varvec06<-varvec
meanvec07<-vector()
varvec07<-vector()
meanvec08<-vector()
varvec08<-vector()
meanvec09<-vector()
varvec09<-vector()
calcImplDensity <- function(date, term) {
var<--1
while(var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == date, ]
optionsToFit<-optionsToFit[optionsToFit$Term == term, ]
lIntegrBound <- 100
uIntegrBound <- 10000
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum = sum + vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 0.5e-3, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
bestFitLog = function(k) {bestFit(log(k))}
#Use this to plot the SVI curve
if (isTRUE(OUTPUT_PLOTS)) {
png(filename = paste("SVILOG", date, "_", term, ".png", sep = ""))
curve(bestFit, from=-2, to=2, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
dev.off()
png(filename = paste("SVI", date, "_", term, ".png", sep = ""))
curve(bestFitLog, from=exp(-2), to=exp(2), xlab="Moneyness [K/F]", ylab="Implied Vol")
title(main = paste("Implied Vol Curve - ", date, "Term:", term))
dev.off()
}
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
integral = tryCatch(integrate(implDensity, lower = lIntegrBound, upper = 10000), error = function(e) e)
if(inherits(integral, "error")) next
implDensityScaled = function(K) {return(implDensity(K) / integral$value)}
#Use this to plot implied densities
if(isTRUE(OUTPUT_PLOTS)) {
png(filename = paste("RNDST", date, "_", term, ".png", sep = ""))
curve(implDensityScaled, from=200, to=2500, xlab="ST", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density - ", date, "Term:", term))
dev.off()
}
#Function only used for plotting
#Input: Return - ouput: RND
returnRND = function(R) {
ST = exp(R)*optionsToFit$Forward[1]
return(implDensityScaled(ST))
}
integralReturn = tryCatch(integrate(returnRND, lower = log(lIntegrBound/optionsToFit$Forward[1]), upper = log(10000/optionsToFit$Forward[1])), error = function(e) e)
if(inherits(integralReturn, "error")) next
returnRNDScaled = function(R) {return(returnRND(R) / integralReturn$value)}
#Use this to plot implied densities
if (isTRUE(OUTPUT_PLOTS)) {
png(filename = paste("RND", date, "_", term, ".png", sep = ""))
curve(returnRNDScaled, from=log(200/optionsToFit$Forward[1]), to=log(2500/optionsToFit$Forward[1]), xlab="Log Holding Period Excess Return R", ylab="Risk Neutral Density")
title(main = paste("Risk Neutral Density -", date, "Term:", term))
dev.off()
}
#Output: "return times probability of the return"
returnImplDensity = function(ST) {
res<-log(ST/optionsToFit$Forward[1])*implDensityScaled(ST)
return(res)
}
#Output: "return^2 times probability of the return"
#cannot just square returnImplDensity (otherwise you would square the probability as well)
returnImplDensitySquared = function(ST) {
res<-log(ST/optionsToFit$Forward[1])^2*implDensityScaled(ST)
return(res)
}
#returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(implDensity, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Density")
#curve(implDensityScaled, from=lIntegrBound, to=5000, xlab="R", ylab="Implied Log Returns")
#calculate the mean of the function by integration, and the var by using the usual formula
mean = tryCatch(integrate(function(x) {return(returnImplDensity(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(mean, "error")) next
varHelp = tryCatch(integrate(function(x) {return(returnImplDensitySquared(x))}, lIntegrBound, uIntegrBound), error = function(e) e)
if(inherits(varHelp, "error")) next
mean = mean$value
var = varHelp$value/(term/12) - mean^2
}
return(c(mean, var))
}
