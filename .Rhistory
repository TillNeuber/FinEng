integral<-integrate(implDensity, lower = 0.5 + epsilon, upper = Inf)
integral<-integrate(implDensity, lower = 0.5 + epsilon, upper = Inf)
curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
integral<-integrate(implDensity, lower = 0.5 + 1, upper = Inf)
integral<-integrate(implDensity, lower = 0.5 + 1, upper = Inf)
integral<-integrate(implDensity, lower = 0.5 + 1, upper = Inf)
epsilon<-0.0001
meanTTM12vec<-vector()
varTTM12vec<-vector()
#Looping over different dates
#Choose term fix as 12
for(dates in t) {
var<--1
valid<-FALSE
while(!isTRUE(valid) || var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == dates, ]
optionsToFit<-optionsToFit[optionsToFit$Term == 12, ]
#TODO: uIntegrBound = Inf does not work
lIntegrBound <- log(0.5/optionsToFit$Forward[1]) + 1
uIntegrBound <- -lIntegrBound
#TODO: Bug: the calculated var is sometimes negative. Repeat calcuation if that is the case until var is positive.
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum =+ vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 1e-4, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
#curve(bestFit, from=-1, to=3, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
#Derive a function f two times at point x (using approximation formula, x is the delta used)
secondDerivative = function(f, x, delta) {
res = (f(x - delta) - 2*f(x) + f(x + delta)) / (delta^2)
return (res)
}
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
#curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
integral<-integrate(implDensity, lower = 0.5 + 1, upper = Inf)
if(integral$value - integral$abs.error - epsilon <= 1 && 1 <= integral$value + integral$abs.error + epsilon) {
valid<-TRUE
} else {
valid<-FALSE
}
#TODO: Check this.
#use the implied density to get the implied log excess return density.
#Problem: doing this leads to function that does not yield 1 when integrated form -Inf to Inf (implDensity does not do that either)
#Dirty trick: scale the resulting function so that the probabilities sum up to 1
#Problem 2: Integrating from -Inf to Inf leads to strange results because the function behaves strange from extrem values
#Even dirtier trick: only integrate from lIntegrBound to uIntegrBound. Chose this boundaries as the min/max of log moneyness we have data for (does that make sense?)
returnImplDensityUnscaled = function(r) {return(implDensity(exp(r)*optionsToFit$Forward[1]))}
returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(returnImplDensity, from=lIntegrBound, to=3, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
#calculate the mean of the function by integration, and the var by using the usual formula
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
var<-(integrate(function(x) {return((x-mean)^2*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value)/(term/12)
}
meanTTM12vec<-c(meanTTM12vec, mean)
varTTM12vec<-c(varTTM12vec, var)
}
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
integral<-integrate(implDensity, lower = 0.5 + 1, upper = Inf)
integral<-integrate(implDensity, lower = 0.5 + 10, upper = Inf)
integral<-integrate(implDensity, lower = 0.5 + 1, upper = Inf)
integral<-0
valid=FALSE
error<-FALSE
#These vectors are used for Q11:
# - meanTTM12vec is a vector of means of log excess returns with a fixed TTM of 12m for all 48 dates
# - varvec is a vector of annualised vars of log ex returns with a fixed TTM of 12m for all 48 dates
meanTTM12vec<-vector()
varTTM12vec<-vector()
integral<-0
valid<-FALSE
error<-FALSE
#Looping over different dates
#Choose term fix as 12
for(dates in t) {
var<--1
valid = FALSE
while(!isTRUE(valid) || var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == dates, ]
optionsToFit<-optionsToFit[optionsToFit$Term == 12, ]
#TODO: uIntegrBound = Inf does not work
lIntegrBound <- log(0.5/optionsToFit$Forward[1]) + 1
uIntegrBound <- -lIntegrBound
#TODO: Bug: the calculated var is sometimes negative. Repeat calcuation if that is the case until var is positive.
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum =+ vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 1e-4, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
#curve(bestFit, from=-1, to=3, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
#Derive a function f two times at point x (using approximation formula, x is the delta used)
secondDerivative = function(f, x, delta) {
res = (f(x - delta) - 2*f(x) + f(x + delta)) / (delta^2)
return (res)
}
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
error = FALSE
integral = tryCatch(integrate(implDensity, lower = 0.5 + 1, upper = Inf), error = function(e) {error = TRUE})
if(!isTrue(error) && integral$value - integral$abs.error - epsilon <= 1 && 1 <= integral$value + integral$abs.error + epsilon) {
valid<-TRUE
#TODO: Check this.
#use the implied density to get the implied log excess return density.
#Problem: doing this leads to function that does not yield 1 when integrated form -Inf to Inf (implDensity does not do that either)
#Dirty trick: scale the resulting function so that the probabilities sum up to 1
#Problem 2: Integrating from -Inf to Inf leads to strange results because the function behaves strange from extrem values
#Even dirtier trick: only integrate from lIntegrBound to uIntegrBound. Chose this boundaries as the min/max of log moneyness we have data for (does that make sense?)
returnImplDensityUnscaled = function(r) {return(implDensity(exp(r)*optionsToFit$Forward[1]))}
returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(returnImplDensity, from=lIntegrBound, to=3, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
#calculate the mean of the function by integration, and the var by using the usual formula
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
var<-(integrate(function(x) {return((x-mean)^2*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value)/(term/12)
} else {
valid<-FALSE
}
}
meanTTM12vec<-c(meanTTM12vec, mean)
varTTM12vec<-c(varTTM12vec, var)
}
meanTTM12vec<-vector()
varTTM12vec<-vector()
integral<-0
valid<-FALSE
error<-FALSE
#Looping over different dates
#Choose term fix as 12
for(dates in c("2006-01-31")) {
var<--1
valid = FALSE
while(!isTRUE(valid) || var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == dates, ]
optionsToFit<-optionsToFit[optionsToFit$Term == 12, ]
#TODO: uIntegrBound = Inf does not work
lIntegrBound <- log(0.5/optionsToFit$Forward[1]) + 1
uIntegrBound <- -lIntegrBound
#TODO: Bug: the calculated var is sometimes negative. Repeat calcuation if that is the case until var is positive.
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum =+ vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 1e-4, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
#curve(bestFit, from=-1, to=3, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
#Derive a function f two times at point x (using approximation formula, x is the delta used)
secondDerivative = function(f, x, delta) {
res = (f(x - delta) - 2*f(x) + f(x + delta)) / (delta^2)
return (res)
}
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
error = FALSE
integral = tryCatch(integrate(implDensity, lower = 0.5 + 1, upper = Inf), error = function(e) {error = TRUE})
if(!isTRUE(error) && integral$value - integral$abs.error - epsilon <= 1 && 1 <= integral$value + integral$abs.error + epsilon) {
valid<-TRUE
#TODO: Check this.
#use the implied density to get the implied log excess return density.
#Problem: doing this leads to function that does not yield 1 when integrated form -Inf to Inf (implDensity does not do that either)
#Dirty trick: scale the resulting function so that the probabilities sum up to 1
#Problem 2: Integrating from -Inf to Inf leads to strange results because the function behaves strange from extrem values
#Even dirtier trick: only integrate from lIntegrBound to uIntegrBound. Chose this boundaries as the min/max of log moneyness we have data for (does that make sense?)
returnImplDensityUnscaled = function(r) {return(implDensity(exp(r)*optionsToFit$Forward[1]))}
returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(returnImplDensity, from=lIntegrBound, to=3, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
#calculate the mean of the function by integration, and the var by using the usual formula
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
var<-(integrate(function(x) {return((x-mean)^2*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value)/(term/12)
} else {
valid<-FALSE
}
}
meanTTM12vec<-c(meanTTM12vec, mean)
varTTM12vec<-c(varTTM12vec, var)
}
epsilon<-0.0001
#Derive a function f two times at point x (using approximation formula, x is the delta used)
secondDerivative = function(f, x, delta) {
res = (f(x - delta) - 2*f(x) + f(x + delta)) / (delta^2)
return (res)
}
#These vectors are used for Q11:
# - meanTTM12vec is a vector of means of log excess returns with a fixed TTM of 12m for all 48 dates
# - varvec is a vector of annualised vars of log ex returns with a fixed TTM of 12m for all 48 dates
meanTTM12vec<-vector()
varTTM12vec<-vector()
integral<-0
valid<-FALSE
error<-FALSE
#Looping over different dates
#Choose term fix as 12
for(dates in t) {
var<--1
valid = FALSE
while(!isTRUE(valid) || var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == dates, ]
optionsToFit<-optionsToFit[optionsToFit$Term == 12, ]
#TODO: uIntegrBound = Inf does not work
lIntegrBound <- log(0.5/optionsToFit$Forward[1]) + 1
uIntegrBound <- -lIntegrBound
#TODO: Bug: the calculated var is sometimes negative. Repeat calcuation if that is the case until var is positive.
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum =+ vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 1e-4, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
#curve(bestFit, from=-1, to=3, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
#curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
error = FALSE
integral = tryCatch(integrate(implDensity, lower = 0.5 + 1, upper = Inf), error = function(e) {error = TRUE})
if(!isTRUE(error) && integral$value - integral$abs.error - epsilon <= 1 && 1 <= integral$value + integral$abs.error + epsilon) {
valid<-TRUE
#TODO: Check this.
#use the implied density to get the implied log excess return density.
#Problem: doing this leads to function that does not yield 1 when integrated form -Inf to Inf (implDensity does not do that either)
#Dirty trick: scale the resulting function so that the probabilities sum up to 1
#Problem 2: Integrating from -Inf to Inf leads to strange results because the function behaves strange from extrem values
#Even dirtier trick: only integrate from lIntegrBound to uIntegrBound. Chose this boundaries as the min/max of log moneyness we have data for (does that make sense?)
returnImplDensityUnscaled = function(r) {return(implDensity(exp(r)*optionsToFit$Forward[1]))}
returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(returnImplDensity, from=lIntegrBound, to=3, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
#calculate the mean of the function by integration, and the var by using the usual formula
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
var<-(integrate(function(x) {return((x-mean)^2*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value)/(term/12)
} else {
valid<-FALSE
}
}
meanTTM12vec<-c(meanTTM12vec, mean)
varTTM12vec<-c(varTTM12vec, var)
}
error
integral
integral
integral
inherits(integral, "error")
integral = tryCatch(integrate(implDensity, lower = 0.5 + 1, upper = Inf), error = function(e) e)
inherits(integral, "error")
inherits(integral, "error")
#These vectors are used for Q11:
# - meanTTM12vec is a vector of means of log excess returns with a fixed TTM of 12m for all 48 dates
# - varvec is a vector of annualised vars of log ex returns with a fixed TTM of 12m for all 48 dates
meanTTM12vec<-vector()
varTTM12vec<-vector()
integral<-0
valid<-FALSE
#Looping over different dates
#Choose term fix as 12
for(dates in t) {
var<--1
valid = FALSE
while(!isTRUE(valid) || var < 0) {
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == dates, ]
optionsToFit<-optionsToFit[optionsToFit$Term == 12, ]
#TODO: uIntegrBound = Inf does not work
lIntegrBound <- log(0.5/optionsToFit$Forward[1]) + 1
uIntegrBound <- -lIntegrBound
#TODO: Bug: the calculated var is sometimes negative. Repeat calcuation if that is the case until var is positive.
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum =+ vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 1e-4, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
#curve(bestFit, from=-1, to=3, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
#curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
integral = tryCatch(integrate(implDensity, lower = 0.5 + 1, upper = Inf), error = function(e) e)
if(inherits(integral, "error")) next
if(integral$value - integral$abs.error - epsilon <= 1 && 1 <= integral$value + integral$abs.error + epsilon) {
valid<-TRUE
#TODO: Check this.
#use the implied density to get the implied log excess return density.
#Problem: doing this leads to function that does not yield 1 when integrated form -Inf to Inf (implDensity does not do that either)
#Dirty trick: scale the resulting function so that the probabilities sum up to 1
#Problem 2: Integrating from -Inf to Inf leads to strange results because the function behaves strange from extrem values
#Even dirtier trick: only integrate from lIntegrBound to uIntegrBound. Chose this boundaries as the min/max of log moneyness we have data for (does that make sense?)
returnImplDensityUnscaled = function(r) {return(implDensity(exp(r)*optionsToFit$Forward[1]))}
returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(returnImplDensity, from=lIntegrBound, to=3, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
#calculate the mean of the function by integration, and the var by using the usual formula
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
var<-(integrate(function(x) {return((x-mean)^2*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value)/(term/12)
} else {
valid<-FALSE
}
}
meanTTM12vec<-c(meanTTM12vec, mean)
varTTM12vec<-c(varTTM12vec, var)
}
library("reshape2")
TTM12frame<-data.frame(t, VIX, meanTTM12vec, varTTM12vec)
ggplot(TTM12frame, aes(t,y = value, color = variable)) +
geom_point(aes(y = VIX, col = "VIX")) +
geom_point(aes(y = meanTTM12vec, col = "mean")) +
geom_point(aes(y = varTTM12vec, col = "var"))
for(term in c(12)) {
valid<-FALSE
var<--1
while(!isTRUE(valid) || var < 0) {
#TODO: make selection variable based
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == "2006-01-31", ]
optionsToFit<-optionsToFit[optionsToFit$Term == term, ]
#TODO: uIntegrBound = Inf does not work
lIntegrBound <- log(0.5/optionsToFit$Forward[1]) + 1
uIntegrBound <- -lIntegrBound
#TODO: Bug: the calculated var is sometimes negative. Repeat calcuation if that is the case until var is positive.
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum =+ vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 1e-4, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
#curve(bestFit, from=-1, to=3, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
#curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
integral = tryCatch(integrate(implDensity, lower = 0.5 + 1, upper = Inf), error = function(e) e)
if(inherits(integral, "error")) next
if(integral$value - integral$abs.error - epsilon <= 1 && 1 <= integral$value + integral$abs.error + epsilon) {
valid<-TRUE
#TODO: Check this.
#use the implied density to get the implied log excess return density.
#Problem: doing this leads to function that does not yield 1 when integrated form -Inf to Inf (implDensity does not do that either)
#Dirty trick: scale the resulting function so that the probabilities sum up to 1
#Problem 2: Integrating from -Inf to Inf leads to strange results because the function behaves strange from extrem values
#Even dirtier trick: only integrate from lIntegrBound to uIntegrBound. Chose this boundaries as the min/max of log moneyness we have data for (does that make sense?)
returnImplDensityUnscaled = function(r) {return(implDensity(exp(r)*optionsToFit$Forward[1]))}
returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(returnImplDensity, from=lIntegrBound, to=3, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
#calculate the mean of the function by integration, and the var by using the usual formula
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
var<-(integrate(function(x) {return((x-mean)^2*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value)/(term/12)
} else {
valid<-FALSE
}
}
meanvec<-c(meanvec, mean)
varvec<-c(varvec, var)
termvec<-c(termvec, term)
}
varframe<-data.frame(termvec, varvec)
ggplot(varframe, aes(termvec,varvec)) + geom_point() + geom_smooth()
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
calcImplDensity <- function(date, term) {
valid<-FALSE
var<--1
while(!isTRUE(valid) || var < 0) {
#TODO: make selection variable based
#Table of options that are used to fit the SVI curve (i.e. all options that match a given t and T (but have different Strikes))
optionsToFit<-raw[raw$ValuationDate == date, ]
optionsToFit<-optionsToFit[optionsToFit$Term == term, ]
#TODO: uIntegrBound = Inf does not work
lIntegrBound <- log(0.5/optionsToFit$Forward[1]) + 1
uIntegrBound <- -lIntegrBound
#TODO: Bug: the calculated var is sometimes negative. Repeat calcuation if that is the case until var is positive.
#Note: The SVI interpolation is non-deterministic because the optimization routine is random - results therefore vary
var<--1
func = function(p) {
sum = 0
for (i in 1:nrow(optionsToFit)) {
#Minimize the squared error (vfunc calculates squared error, sum gives the total squared error from all options used to calculate the SVI curve)
sum =+ vfunc(p, optionsToFit$Moneyness[i], optionsToFit$TTM[i], optionsToFit$ImpliedVol[i])
}
return(sum)
}
#Then write the optimization function applied to vfunc
outDEoptim <- DEoptim(func, l, u, DEoptim.control(VTR = 1e-4, itermax =  1e4))
summary(outDEoptim)
#The SVI curve. Note:k is the log moneyness, not the strike
bestFit = function(k) {implVol(outDEoptim$optim$bestmem, k, optionsToFit$TTM[1])}
#curve(bestFit, from=-1, to=3, xlab="Moneyness [log(K/F)]", ylab="Implied Vol")
C = function(K) {BSprice(1, optionsToFit$Forward[1]*exp(-(optionsToFit$InterestRate[1] - optionsToFit$DividendYield[1])*optionsToFit$TTM[1]), K, bestFit(log(K/optionsToFit$Forward[1])), optionsToFit$DividendYield[1], optionsToFit$InterestRate[1], optionsToFit$TTM[1])}
#The implied density as a function of the strike. Note: Not the implied return density
implDensity = function(K) {
Dt = exp(-optionsToFit$TTM[1]*(optionsToFit$InterestRate[1]))
secDeriv = secondDerivative(C, K, 0.5)
return(secDeriv / Dt)
}
#curve(implDensity, from=0.5, to=5000, xlab="K", ylab="Implied Density")
integral = tryCatch(integrate(implDensity, lower = 0.5 + 1, upper = Inf), error = function(e) e)
if(inherits(integral, "error")) next
if(integral$value - integral$abs.error - epsilon <= 1 && 1 <= integral$value + integral$abs.error + epsilon) {
valid<-TRUE
#TODO: Check this.
#use the implied density to get the implied log excess return density.
#Problem: doing this leads to function that does not yield 1 when integrated form -Inf to Inf (implDensity does not do that either)
#Dirty trick: scale the resulting function so that the probabilities sum up to 1
#Problem 2: Integrating from -Inf to Inf leads to strange results because the function behaves strange from extrem values
#Even dirtier trick: only integrate from lIntegrBound to uIntegrBound. Chose this boundaries as the min/max of log moneyness we have data for (does that make sense?)
returnImplDensityUnscaled = function(r) {return(implDensity(exp(r)*optionsToFit$Forward[1]))}
returnImplDensity = function(r) {return(returnImplDensityUnscaled(r)/integrate(returnImplDensityUnscaled, lower=lIntegrBound,upper=uIntegrBound)$value)}
#curve(returnImplDensity, from=lIntegrBound, to=3, xlab="R", ylab="Implied Density")
curve(returnImplDensityUnscaled, from=lIntegrBound, to=10, xlab="R", ylab="Implied Density")
#calculate the mean of the function by integration, and the var by using the usual formula
mean<-integrate(function(x) {return(x*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value
var<-(integrate(function(x) {return((x-mean)^2*returnImplDensity(x))}, lIntegrBound, uIntegrBound)$value)/(term/12)
} else {
valid<-FALSE
}
}
return(c(mean, var))
}
calcImplDensity("2006-01-31", 12)
calcImplDensity("2006-01-31", 12)
